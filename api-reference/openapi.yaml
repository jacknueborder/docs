openapi: 3.0.0
info:
  description: 'Provide your Bearer token in the format: Bearer <token>'
  title: NueBorder API
  termsOfService: http://swagger.io/terms/
  contact:
    name: Jack Dunlap
    url: http://www.swagger.io/support
    email: support@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '1.0'
paths:
  '/report_general/{customerId}/create':
    post:
      security:
        - BearerAuth: []
      description: Generates a new report ID and creates an entry in the database for
        the general report based on the customer ID.
      tags:
        - General Report
      summary: Create a New General Report
      parameters:
        - example: '"12345"'
          description: Customer ID for which the report is created
          name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: 'Successfully created the general report" example({"status":
            "created", "message": "Report created successfully", "data":
            {"report_id": "generated-uuid"}})'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResponse'
        '400':
          description: 'Occurs when the customerId is missing in the URL"
            example({"status": "error", "message": "Missing customer ID"})'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: 'Database error while creating the report" example({"status":
            "error", "message": "Internal server error"})'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
  '/report_general/{customerId}/reports/{reportId}':
    get:
      security:
        - BearerAuth: []
      description: Retrieves EU CBAM general report information from the database
        based on URL params :customerId and :reportId.
      tags:
        - General Report
      summary: Get General Report Information
      parameters:
        - example: '"12345"'
          description: Customer ID associated with the general report
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - example: '"67890"'
          description: Report ID associated with the general report
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successfully retrieved general report information"
            example({"status": "success", "data": {...}})'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flat.QReportType'
        '400':
          description: 'Occurs when the customerId or reportId is missing or invalid"
            example({"status": "error", "message": "Invalid parameters"})'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: 'Internal database error, possibly due to network or data integrity
            issues" example({"status": "error", "message": "Internal server
            error"})'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
    post:
      security:
        - BearerAuth: []
      description: Inserts or updates a general report's information in the database
        based on URL params :customerId, :reportId, and the provided payload.
      tags:
        - General Report
      summary: Update General Report Information
      parameters:
        - example: '"12345"'
          description: Customer ID associated with the general report
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - example: '"67890"'
          description: Report ID associated with the general report
          name: reportId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/flat.QReportType'
        description: General report information payload
        required: true
      responses:
        '200':
          description: 'General report information successfully updated"
            example({"status": "success", "message": "Updated successfully",
            "data": {...}})'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResponse'
        '400':
          description: 'Occurs when the JSON payload is missing or malformed"
            example({"status": "error", "message": "Invalid JSON payload"})'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '422':
          description: 'Validation error in the provided payload, such as missing required
            fields" example({"status": "error", "message": "Validation error",
            "errors": {...}})'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.ValidationErrorResponse'
        '500':
          description: 'Internal database error, possibly due to network or data integrity
            issues" example({"status": "error", "message": "Internal server
            error"})'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
  '/goodsEmissions/{customerId}/{reportId}':
    get:
      security:
        - BearerAuth: []
      description: Retrieves goods emissions data for the specified customer and report.
      tags:
        - Imported Goods Emissions
      summary: Retrieve Goods Emissions
      parameters:
        - description: Customer ID associated with the goods emissions
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the goods emissions
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Goods emissions data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.GetImportedGoodsEmissionsResponse'
        '400':
          description: Missing or invalid customerId or reportId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error retrieving goods emissions data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
    put:
      security:
        - BearerAuth: []
      description: Updates an existing record or inserts new goods emissions data for
        the specified customer and report.
      tags:
        - Imported Goods Emissions
      summary: Update or Insert Goods Emissions
      parameters:
        - description: Customer ID associated with the goods emissions
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the goods emissions
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated or inserted goods emissions data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResponse'
        '400':
          description: Missing or invalid customerId or reportId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error updating/inserting goods emissions data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
  '/goodsQuality/{customerId}/{reportId}':
    get:
      security:
        - BearerAuth: []
      description: Retrieves goods quality data for the specified customer and report.
      tags:
        - GoodsQuality
      summary: Retrieve Goods Quality
      parameters:
        - description: Customer ID associated with the goods quality data
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the goods quality data
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Goods quality data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.GetImportedGoodsQuantityResponse'
        '400':
          description: Missing or invalid customerId or reportId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error retrieving goods quality data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
    put:
      security:
        - BearerAuth: []
      description: Updates an existing record or inserts new goods quality data for
        the specified customer and report.
      tags:
        - Imported Goods Quality
      summary: Update or Insert Goods Quality
      parameters:
        - description: Customer ID associated with the goods quality data
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the goods quality data
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated or inserted goods quality data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResponse'
        '400':
          description: Missing or invalid customerId or reportId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error updating/inserting goods quality data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
  '/importedGood/{customerId}/{reportId}':
    get:
      security:
        - BearerAuth: []
      description: Retrieves details of an imported good using the customerId and
        reportId provided.
      tags:
        - ImportedGoods
      summary: Retrieve an Imported Good
      parameters:
        - description: Customer ID associated with the imported good
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the imported good
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Details of the imported good
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.GetImportedGoodsGeneralResponse'
        '400':
          description: Missing or invalid customerId or reportId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error retrieving the imported good
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
    put:
      security:
        - BearerAuth: []
      description: Updates an existing imported good or inserts a new one based on the
        provided customerId and reportId.
      tags:
        - Imported Goods General
      summary: Update or Insert an Imported Good
      parameters:
        - description: Customer ID associated with the imported good
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the imported good
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated or inserted the imported good
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResponse'
        '400':
          description: Missing or invalid customerId or reportId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error while updating/inserting the imported good
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
    post:
      security:
        - BearerAuth: []
      description: Creates a new imported good entry based on the provided
        `customerId` and `reportId` from the route parameters.
      tags:
        - Imported Goods General
      summary: Create a New Imported Good
      parameters:
        - description: Customer ID associated with the imported good
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the imported good
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully created the imported good
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResponse'
        '400':
          description: Missing or invalid customerId or reportId in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error while creating the imported good
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
  '/importedGoodDocuments/{customerId}/{reportId}':
    get:
      security:
        - BearerAuth: []
      description: Retrieves documents associated with an imported good for the
        specified customer and report.
      tags:
        - Imported Good Documents
      summary: Retrieve Imported Goods Documents
      parameters:
        - description: Customer ID associated with the imported good documents
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the imported good documents
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Imported good documents retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.GetImportedGoodDocumentsResponse'
        '400':
          description: Missing or invalid customerId or reportId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error retrieving imported good documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
    put:
      security:
        - BearerAuth: []
      description: Updates an existing record or inserts new documents for an imported
        good based on the provided customer and report IDs.
      tags:
        - Imported Good Documents
      summary: Update or Insert Imported Good Documents
      parameters:
        - description: Customer ID associated with the imported good documents
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the imported good documents
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated or inserted imported good documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResponse'
        '400':
          description: Missing or invalid customerId or reportId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error updating/inserting imported good documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
  '/importedGoodEmissionDocuments/{customerId}/{reportId}':
    get:
      security:
        - BearerAuth: []
      description: Retrieves emission documents for an imported good using the
        specified customer and report IDs.
      tags:
        - Imported Good Emission Documents
      summary: Retrieve Imported Goods Emission Documents
      parameters:
        - description: Customer ID associated with the imported good emission documents
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the imported good emission documents
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Imported good emission documents retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.GetImportedGoodEmissionDocumentsResponse'
        '400':
          description: Missing or invalid customerId or reportId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error retrieving imported good emission documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
    put:
      security:
        - BearerAuth: []
      description: Updates an existing record or inserts new emission documents for an
        imported good based on the provided customer and report IDs.
      tags:
        - Imported Good Emission Documents
      summary: Update or Insert Imported Good Emission Documents
      parameters:
        - description: Customer ID associated with the imported good emission documents
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the imported good emission documents
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated or inserted imported good emission documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResponse'
        '400':
          description: Missing or invalid customerId or reportId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error updating/inserting imported good emission documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
  '/importedGoodsParams/{customerId}/{reportId}':
    get:
      security:
        - BearerAuth: []
      description: Retrieves parameters for imported goods in an EU CBAM report using
        the specified customer and report IDs.
      tags:
        - Imported Goods Params
      summary: Retrieve Imported Goods Parameters
      parameters:
        - description: Customer ID associated with the imported goods parameters
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the imported goods parameters
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Imported goods parameters retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.GetProdMethodQualifyingParamsResponse'
        '400':
          description: Missing or invalid customerId or reportId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error retrieving imported goods parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'
    put:
      security:
        - BearerAuth: []
      description: Updates or inserts parameters for imported goods in an EU CBAM
        report based on the provided customer and report IDs.
      tags:
        - Imported Goods Params
      summary: Update or Insert Imported Goods Parameters
      parameters:
        - description: Customer ID associated with the imported goods parameters
          name: customerId
          in: path
          required: true
          schema:
            type: string
        - description: Report ID associated with the imported goods parameters
          name: reportId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully updated or inserted imported goods parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.SuccessResponse'
        '400':
          description: Missing or invalid customerId or reportId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.JSONPayloadErrorResponse'
        '500':
          description: Error updating/inserting imported goods parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/models.InternalServerErrorResponse'

externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
servers:
  - url: //http://localhost:8080/api/v1
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    flat.ContactDetailsType:
      type: object
      required:
        - email
        - name
        - phone
      properties:
        email:
          description: 'Email address of the contact person (Min Length: 1, Max Length:
            256)'
          type: string
          example: johndoe@example.com
        name:
          description: 'Full name of the contact person or entity (Min Length: 1, Max
            Length: 70)'
          type: string
          example: John Doe
        phone:
          description: 'Phone number of the contact person (Min Length: 1, Max Length: 35)'
          type: string
          example: +49 30 1234567
    flat.GoodsEmissionsType:
      type: object
      $ref: "#/components/schemas/flat.GoodsEmissionsType"
      required:
        - applicable_reporting_type_methodology
        - determination_type
        - electricity_source
        - measurement_unit
        - measurement_unit
        - measurement_unit
        - specific_embedded_emissions
        
      properties:
        applicable_reporting_type_methodology:
          description: 'Reporting methodology used to calculate direct emissions (Min
            Length: 1, Max Length: 5)'
          type: string
          example: DEF
        determination_type:
          description: 'Method used to determine indirect emissions (Min Length: 1, Max
            Length: 5)'
          type: string
          example: Actual
        electricity_source:
          description: 'Source of electricity used in production (Min Length: 1, Max
            Length: 5)'
          type: string
          example: Grid
        installation:
          description: Information about the production facility where emissions are
            generated ()
          allOf:
            - $ref: '#/components/schemas/flat.InstallationType'
        installation_operator:
          description: Details of the operator responsible for emissions at the production
            site ()
          allOf:
            - $ref: '#/components/schemas/flat.InstallationOperatorType'
        measurement_unit:
          description: 'Measurement unit for indirect emissions (Min Length: 1, Max
            Length: 5)'
          type: string
          example: tCO2e
        remarks_emissions:
          description: Additional remarks regarding emissions data (max-occurs=9)
          type: array
          items:
            $ref: '#/components/schemas/flat.RemarksEmissionsType'
        sequence_number:
          description: "Sequence index for emissions data related to the reported good
            (Pattern: \\d{1,5})"
          type: integer
          example: 1
        specific_embedded_emissions:
          description: 'Specific embedded emissions value based on production and energy
            use (Total Digits: 16, Fraction Digits: 7)'
          type: number
          example: 0.1234567
    flat.ImportedGoodType:
      type: object
      $ref: "#/components/schemas/flat.ImportedGoodType"
      required:
        - additional_information
        - city
        - city
        - cn_code
        - country
        - country
        - country
        - description
        - hs_code
        - identification_number
        - identification_number
        - measurement_unit
        - name
        - name
      properties:
        additional_information:
          description: 'Additional remarks related to the imported good (Min Length: 1,
            Max Length: 512)'
          type: string
          example: This import follows all required compliance procedures with verified
            emissions data.
        city:
          description: 'City of the importer’s address (Min Length: 1, Max Length: 35)'
          type: string
          example: Berlin
        cn_code:
          description: 'Combined Nomenclature (CN) code for more detailed classification
            (Min Length: 8, Max Length: 8)'
          type: string
          example: '72083910'
        country:
          description: 'Country of origin of the imported good (Min Length: 2, Max Length:
            2)'
          type: string
          example: CN
        description:
          description: 'Description of the imported good (Min Length: 1, Max Length: 512)'
          type: string
          example: Non-alloy hot-rolled steel coils used in manufacturing.
        hs_code:
          description: 'Harmonized System (HS) code classifying the imported good (Min
            Length: 6, Max Length: 6)'
          type: string
          example: '720839'
        identification_number:
          description: 'Unique identification number of the importer (Min Length: 1, Max
            Length: 17)'
          type: string
          example: EU654321987000
        item_number:
          description: "Unique item reference for the imported good (Pattern: \\d{1,5})"
          type: integer
          example: 1001
        measurement_unit:
          description: 'Unit of measurement for the imported quantity (Min Length: 1, Max
            Length: 5)'
          type: string
          example: MT
        name:
          description: 'Full name of the importer (Min Length: 1, Max Length: 70)'
          type: string
          example: Eco Trade Inc.
        supporting_documents:
          description: Documents verifying the import (max-occurs=99)
          type: array
          items:
            $ref: '#/components/schemas/flat.SupportingDocumentsType'
    flat.ImportedQuantityType:
      type: object
      $ref: "#/components/schemas/flat.ImportedQuantityType"
      required:
        - additional_information
        - import_area
        - measure_procedure_imported
        - requested_proc
      properties:
        additional_information:
          description: 'Additional references or remarks related to the import (Min
            Length: 1, Max Length: 512)'
          type: string
          example: This section includes any relevant remarks or contextual details about
            the imported quantity.
        import_area:
          description: 'Area where the import took place (Min Length: 1, Max Length: 5)'
          type: string
          example: EU
        inward_processing_info:
          description: Details related to inward processing, if applicable (max-occurs=999)
          type: array
          items:
            $ref: '#/components/schemas/flat.InwardProcessingInfoType'
        measure_procedure_imported:
          description: Measurement procedure used to determine imported quantity
            (max-occurs=2)
          type: array
          items:
            $ref: '#/components/schemas/flat.MeasureProcedureType'
        requested_proc:
          description: 'Requested customs procedure for the import (Min Length: 2, Max
            Length: 2)'
          type: string
          example: '40'
        sequence_number:
          description: "Sequential reference for the reported quantity (Pattern: \\d{1,5})"
          type: integer
          example: 1
    flat.InstallationOperatorType:
      type: object
      $ref: "#/components/schemas/flat.InstallationOperatorType"
      required:
        - city
        - contact_details
        - country
        - operator_id
        - operator_name
      properties:
        city:
          description: 'City where the production installation is located (Min Length: 1,
            Max Length: 35)'
          type: string
          example: Berlin
        contact_details:
          description: Contact details for inquiries related to the installation operator
            (max-occurs=9)
          type: array
          items:
            $ref: '#/components/schemas/flat.ContactDetailsType'
        country:
          description: 'Country where the installation operator is registered (Min Length:
            2, Max Length: 2)'
          type: string
          example: DE
        operator_id:
          description: 'Unique identification number of the installation operator (Min
            Length: 1, Max Length: 25)'
          type: string
          example: OPR-123456789
        operator_name:
          description: 'Full name of the installation operator (Min Length: 1, Max Length:
            70)'
          type: string
          example: Green Energy Solutions Ltd.
    flat.InstallationType:
      type: object
      $ref: "#/components/schemas/flat.InstallationType"
      required:
        - city
        - establishment_country
        - installation_id
        - installation_name
      properties:
        city:
          description: 'City where the installation is located (Min Length: 1, Max Length:
            35)'
          type: string
          example: Berlin
        establishment_country:
          description: 'Country where the installation is established (Min Length: 2, Max
            Length: 2)'
          type: string
          example: DE
        installation_id:
          description: 'Unique identifier for the production installation (Min Length: 1,
            Max Length: 20)'
          type: string
          example: INST-12345
        installation_name:
          description: 'Name of the production installation (Min Length: 1, Max Length:
            256)'
          type: string
          example: Green Steel Factory
    flat.InwardProcessingInfoType:
      type: object
      $ref: "#/components/schemas/flat.InwardProcessingInfoType"
      required:
        - authorisation
        - deadline
        - discharge_bill_waiver
        - end_time
        - member_state_auth
        - start_time
      properties:
        authorisation:
          description: 'Authorization reference for inward processing (Min Length: 1, Max
            Length: 512)'
          type: string
          example: IP-2024-001
        deadline:
          description: 'Deadline for submitting the Bill of Discharge (Total Digits: 8)'
          type: integer
          example: 20250131
        discharge_bill_waiver:
          description: 'Waiver status for the Bill of Discharge (Total Digits: 1)'
          type: integer
          example: 1
        end_time:
          description: 'End date of the inward processing period (Total Digits: 8)'
          type: integer
          example: 20241231
        member_state_auth:
          description: 'Member state that authorized the inward processing (Min Length: 2,
            Max Length: 2)'
          type: string
          example: DE
        start_time:
          description: 'Start date of the inward processing period (Total Digits: 8)'
          type: integer
          example: 20240101
    flat.MeasureProcedureType:
      type: object
      $ref: "#/components/schemas/flat.MeasureProcedureType"
      required:
        - indicator
        - measurement_unit
      properties:
        indicator:
          description: 'Numeric indicator specifying the type of measurement applied
            (Total Digits: 1)'
          type: integer
          example: 1
        measurement_unit:
          description: 'Unit of measurement used for the reported quantity (Min Length: 1,
            Max Length: 5)'
          type: string
          example: MT
    flat.ProdMethodQualifyingParamsType:
      type: object
      $ref: "#/components/schemas/flat.ProdMethodQualifyingParamsType"
      required:
        - method_id
        - method_name
      properties:
        additional_information:
          description: 'Additional details regarding the production method (Min Length: 1,
            Max Length: 512)'
          type: string
          example: Includes low-carbon energy sources in the steelmaking process.
        method_id:
          description: 'Unique identifier for the production method (Min Length: 1, Max
            Length: 5)'
          type: string
          example: PM-01
        method_name:
          description: 'Name of the production method (Min Length: 1, Max Length: 256)'
          type: string
          example: Electric Arc Furnace
        sequence_number:
          description: "Sequence number for tracking production method parameters
            (Pattern: \\d{1,5})"
          type: integer
          example: 1
        steel_mill_number:
          description: 'Identifier for the steel mill used in production (Min Length: 1,
            Max Length: 256)'
          type: string
          example: STEELMILL-67890
    flat.QReportType:
      type: object
      $ref: "#/components/schemas/flat.QReportType"
    flat.RemarksEmissionsType:
      type: object
      $ref: "#/components/schemas/flat.RemarksEmissionsType"
      required:
        - additional_information
      properties:
        additional_information:
          description: 'Additional information or context regarding reported emissions
            (Min Length: 1, Max Length: 512)'
          type: string
          example: Clarification on emission calculation methodology
        sequence_number:
          description: "Sequential reference for emission remarks (Pattern: \\d{1,5})"
          type: integer
          example: 1
    flat.SignaturesType:
      type: object
      $ref: "#/components/schemas/flat.SignaturesType"
      required:
        - global_data_confirmation
        - other_applicable_reporting_methodology
        - position_of_person_sending
        - signature
        - signature_place
        - use_of_data_confirmation
      properties:
        global_data_confirmation:
          description: Confirms global data validity under CBAM ()
          type: boolean
          example: true
        other_applicable_reporting_methodology:
          description: Alternate methodology used for CBAM data ()
          type: boolean
          example: false
        position_of_person_sending:
          description: 'Position of signatory in CBAM submission (Min Length: 1, Max
            Length: 128)'
          type: string
          example: Chief Compliance Officer
        signature:
          description: 'Authorized signatory for CBAM report (Min Length: 1, Max Length:
            128)'
          type: string
          example: John Doe
        signature_place:
          description: 'Location of signature for CBAM report (Min Length: 1, Max Length:
            128)'
          type: string
          example: Brussels, Belgium
        use_of_data_confirmation:
          description: Confirms data usage complies with CBAM ()
          type: boolean
          example: true
    flat.SupportingDocumentsType:
      type: object
      $ref: "#/components/schemas/flat.SupportingDocumentsType"
      required:
        - binary
        - filename
        - mime
        - type
      properties:
        ItemNumber:
          description: Item number associated with the supporting document.
          type: string
        binary:
          description: Binary representation of the attachment ()
          type: array
          items:
            type: integer
        country:
          description: 'Country where the supporting document was issued (Min Length: 2,
            Max Length: 2)'
          type: string
          example: FR
        description:
          description: 'Brief description of the supporting document (Min Length: 1, Max
            Length: 256)'
          type: string
          example: Certificate of origin for imported steel.
        filename:
          description: 'Name of the attached file (Min Length: 1, Max Length: 256)'
          type: string
          example: certificate_of_origin.pdf
        issuing_auth_name:
          description: 'Name of the issuing authority (Min Length: 1, Max Length: 70)'
          type: string
          example: European Customs Authority
        line_item_number:
          description: "Line item reference for the document (Pattern: \\d{1,5})"
          type: integer
          example: 1001
        mime:
          description: 'MIME type of the attachment file (Min Length: 1, Max Length: 71)'
          type: string
          example: application/pdf
        reference_number:
          description: 'Reference number assigned to the supporting document (Min Length:
            1, Max Length: 70)'
          type: string
          example: DOC-2024-001
        sequence_number:
          description: "Sequential reference for supporting documents (Pattern: \\d{1,5})"
          type: integer
          example: 1
        type:
          description: 'Type of supporting document (Min Length: 4, Max Length: 4)'
          type: string
          example: C001
        uri:
          description: 'URI link to the attached file (Min Length: 1, Max Length: 2048)'
          type: string
          example: https://documents.example.com/certificate.pdf
        validity_end_date:
          description: "Document validity end date (Pattern: \\d{4}-\\d\\d-\\d\\d)"
          type: string
          example: 2025-01-01
        validity_start_date:
          description: "Document validity start date (Pattern: \\d{4}-\\d\\d-\\d\\d)"
          type: string
          example: 2024-01-01
    models.GetImportedGoodDocumentsResponse:
      type: object
      $ref: "#/components/schemas/models.GetImportedGoodDocumentsResponse"
      properties:
        message:
          description: A detailed success message.
          type: string
          example: Operation completed successfully
        status:
          description: HTTP status code.
          type: integer
          example: 200
        supportingDocumentsType:
          type: array
          items:
            $ref: '#/components/schemas/flat.SupportingDocumentsType'
    models.GetImportedGoodEmissionDocumentsResponse:
      type: object
      properties:
        message:
          description: A detailed success message.
          type: string
          example: Operation completed successfully
        status:
          description: HTTP status code.
          type: integer
          example: 200
        supportingDocumentsType:
          type: array
          items:
            $ref: '#/components/schemas/flat.SupportingDocumentsType'
    models.GetImportedGoodsEmissionsResponse:
      description: Returns emissions-related information that is required to calculate
        the carbon footprint for EU CBAM submissions.
      type: object
      properties:
        goodsEmissionsType:
          type: array
          items:
            $ref: '#/components/schemas/flat.GoodsEmissionsType'
        message:
          description: A detailed success message.
          type: string
          example: Operation completed successfully
        status:
          description: HTTP status code.
          type: integer
          example: 200
    models.GetImportedGoodsGeneralResponse:
      description: Contains a list of imported goods types, which are critical for
        assessing imported goods under the EU CBAM regulatory framework.
      type: object
      properties:
        importedGoodType:
          type: array
          items:
            $ref: '#/components/schemas/flat.ImportedGoodType'
        message:
          description: A detailed success message.
          type: string
          example: Operation completed successfully
        status:
          description: HTTP status code.
          type: integer
          example: 200
    models.GetImportedGoodsQuantityResponse:
      description: Provides detailed information on the quantities of imported goods
        subject to EU CBAM requirements.
      type: object
      properties:
        importedQuantityType:
          type: array
          items:
            $ref: '#/components/schemas/flat.ImportedQuantityType'
        message:
          description: A detailed success message.
          type: string
          example: Operation completed successfully
        status:
          description: HTTP status code.
          type: integer
          example: 200
    models.GetProdMethodQualifyingParamsResponse:
      description: Details the qualifying parameters of production methods for
        imported goods, supporting compliance verification within the EU CBAM
        framework.
      type: object
      properties:
        message:
          description: A detailed success message.
          type: string
          example: Operation completed successfully
        prodMethodQualifyingParamsType:
          type: array
          items:
            $ref: '#/components/schemas/flat.ProdMethodQualifyingParamsType'
        status:
          description: HTTP status code.
          type: integer
          example: 200
    models.InternalServerErrorResponse:
      description: A response indicating that an internal server error occurred.
      type: object
      properties:
        message:
          description: A detailed error message.
          type: string
          example: An internal server error occurred
        status:
          description: HTTP status code.
          type: integer
          example: 500
    models.JSONPayloadErrorResponse:
      description: A response indicating that the JSON payload is invalid.
      type: object
      properties:
        message:
          description: A detailed error message.
          type: string
          example: The JSON payload is invalid
        status:
          description: HTTP status code.
          type: integerd
          example: 400
    models.SuccessResponse:
      description: A standard successful API response.
      type: object
      properties:
        message:
          description: A detailed success message.
          type: string
          example: Operation completed successfully
        status:
          description: HTTP status code.
          type: integer
          example: 200
    models.ValidationError:
      description: Represents the details of a validation error.
      type: object
      properties:
        description:
          description: Short explanation
          type: string
          example: A value is required
        field:
          description: The name of the field that failed validation
          type: string
          example: example_field
        invalid_value:
          description: The invalid value provided for the field
          type: string
          example: ''
        message:
          description: Human-readable error message
          type: string
          example: The exampleField is required
        rule:
          description: Detailed validation rule
          type: string
          example: non-empty
        tag:
          description: Validation rule or tag that failed
          type: string
          example: required
    models.ValidationErrorResponse:
      description: A response containing validation errors for the provided data.
      type: object
      properties:
        message:
          description: A detailed error message.
          type: string
          example: Validation failed for the provided data
        status:
          description: HTTP status code.
          type: integer
          example: 422
        validation_errors:
          description: A list of validation errors.
          type: array
          items:
            $ref: '#/components/schemas/models.ValidationError'
